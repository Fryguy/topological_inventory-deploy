apiVersion: v1
kind: Template
labels:
  template: topological-inventory
metadata:
  name: topological-inventory
  annotations:
    iconClass: icon-rails
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    name: "topological-inventory-secrets"
  stringData:
    pg-password: "${DATABASE_PASSWORD}"
    secret-key: "${SECRET_KEY}"
    encryption-key: "${ENCRYPTION_KEY}"
- apiVersion: v1
  kind: Service
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      description: Exposes the database server
  spec:
    ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
    selector:
      name: "${DATABASE_SERVICE_NAME}"
- apiVersion: v1
  kind: Service
  metadata:
    name: topological-inventory-api
  spec:
    ports:
    - name: topological-inventory-api
      port: 8080
      targetPort: 3000
    selector:
      name: topological-inventory-api
- apiVersion: v1
  kind: Service
  metadata:
    name: topological-inventory-ingress
  spec:
    ports:
    - name: topological-inventory-ingress
      port: 4567
      targetPort: 4567
    selector:
      name: topological-inventory-ingress
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: "${DATABASE_VOLUME_CAPACITY}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "${DATABASE_SERVICE_NAME}"
    annotations:
      description: Defines how to deploy the database
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      name: "${DATABASE_SERVICE_NAME}"
    template:
      metadata:
        name: "${DATABASE_SERVICE_NAME}"
        labels:
          name: "${DATABASE_SERVICE_NAME}"
      spec:
        volumes:
        - name: postgres-volume
          persistentVolumeClaim:
            claimName: "${DATABASE_SERVICE_NAME}"
        containers:
        - name: "${DATABASE_SERVICE_NAME}"
          image: "${POSTGRESQL_IMG_NAME}:${POSTGRESQL_IMG_TAG}"
          ports:
          - containerPort: 5432
          volumeMounts:
          - name: postgres-volume
            mountPath: "/var/lib/pgsql/data"
          env:
          - name: POSTGRESQL_USER
            value: "${DATABASE_USER}"
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "topological-inventory-secrets"
                key: pg-password
          - name: POSTGRESQL_DATABASE
            value: "${DATABASE_NAME}"
          - name: POSTGRESQL_MAX_CONNECTIONS
            value: "${POSTGRESQL_MAX_CONNECTIONS}"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: topological-inventory-api
  spec:
    replicas: 1
    selector:
      name: topological-inventory-api
    template:
      metadata:
        name: topological-inventory-api
        labels:
          name: topological-inventory-api
      spec:
        containers:
        - name: topological-inventory-api
          image: topological-inventory-ci/topological-inventory-api:latest
          args:
          - "/usr/bin/start_api_server"
          ports:
          - containerPort: 3000
          env:
          - name: DATABASE_USER
            value: "${DATABASE_USER}"
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: topological-inventory-secrets
                key: pg-password
          - name: DATABASE_NAME
            value: "${DATABASE_NAME}"
          - name: DATABASE_HOST
            value: "${DATABASE_SERVICE_NAME}"
          - name: DATABASE_PORT
            value: "5432"
          - name: SECRET_KEY_BASE
            valueFrom:
              secretKeyRef:
                name: topological-inventory-secrets
                key: secret-key
          - name: ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                name: topological-inventory-secrets
                key: encryption-key
          readinessProbe:
            timeoutSeconds: 1
            tcpSocket:
              port: 3000
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - topological-inventory-api
          from:
            kind: ImageStreamTag
            name: topological-inventory-api:latest
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: topological-inventory-persister
  spec:
    replicas: 1
    selector:
      name: topological-inventory-persister
    template:
      metadata:
        name: topological-inventory-persister
        labels:
          name: topological-inventory-persister
      spec:
        containers:
        - name: topological-inventory-persister
          image: topological-inventory-ci/topological-inventory-api:latest
          args:
          - "/usr/bin/start_persister"
          env:
          - name: DATABASE_USER
            value: "${DATABASE_USER}"
          - name: DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: topological-inventory-secrets
                key: pg-password
          - name: DATABASE_NAME
            value: "${DATABASE_NAME}"
          - name: DATABASE_HOST
            value: "${DATABASE_SERVICE_NAME}"
          - name: DATABASE_PORT
            value: "5432"
          - name: ENCRYPTION_KEY
            valueFrom:
              secretKeyRef:
                name: topological-inventory-secrets
                key: encryption-key
          - name: QUEUE_HOST
            value: "${KAFKA_HOST}"
          - name: QUEUE_PORT
            value: "${KAFKA_PORT}"
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - topological-inventory-persister
          from:
            kind: ImageStreamTag
            name: topological-inventory-api:latest
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: topological-inventory-ingress
  spec:
    replicas: 1
    selector:
      name: topological-inventory-ingress
    template:
      metadata:
        name: topological-inventory-ingress
        labels:
          name: topological-inventory-ingress
      spec:
        containers:
        - name: topological-inventory-ingress
          image: topological-inventory-ci/topological-inventory-ingress:latest
          ports:
          - containerPort: 4567
          readinessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: 4567
          env:
          - name: QUEUE_HOST
            value: "${KAFKA_HOST}"
          - name: QUEUE_PORT
            value: "${KAFKA_PORT}"
    triggers:
      - type: ConfigChange
      - type: ImageChange
        imageChangeParams:
          automatic: true
          containerNames:
            - topological-inventory-ingress
          from:
            kind: ImageStreamTag
            name: topological-inventory-ingress:latest
parameters:
- name: DATABASE_SERVICE_NAME
  displayName: PostgreSQL Service Name
  required: true
  description: The name of the OpenShift Service exposed for the PostgreSQL container.
  value: topological-inventory-postgresql
- name: DATABASE_USER
  displayName: PostgreSQL User
  required: true
  description: PostgreSQL user that will access the database.
  value: root
- name: DATABASE_PASSWORD
  displayName: PostgreSQL Password
  required: true
  description: Password for the PostgreSQL user.
  from: "[a-zA-Z0-9]{8}"
  generate: expression
- name: DATABASE_NAME
  required: true
  displayName: PostgreSQL Database Name
  description: Name of the PostgreSQL database accessed.
  value: topological_inventory_production
- name: POSTGRESQL_MAX_CONNECTIONS
  displayName: PostgreSQL Max Connections
  description: PostgreSQL maximum number of database connections allowed.
  value: '100'
- name: POSTGRESQL_IMG_NAME
  displayName: PostgreSQL Image Name
  description: This is the PostgreSQL image name requested to deploy.
  value: docker.io/manageiq/postgresql
- name: POSTGRESQL_IMG_TAG
  displayName: PostgreSQL Image Tag
  description: This is the PostgreSQL image tag/version requested to deploy.
  value: latest
- name: DATABASE_VOLUME_CAPACITY
  displayName: Database Volume Capacity
  required: true
  description: Volume space available for database.
  value: 15Gi
- name: SECRET_KEY
  displayName: Secret Key
  required: true
  description: Rails SECRET_KEY_BASE
  from: "[a-f0-9]{128}"
  generate: expression
- name: ENCRYPTION_KEY
  displayName: Encryption Key
  required: true
  description: Encryption Key for Passwords
  from: "[a-zA-Z0-9]{43}"
  generate: expression
- name: KAFKA_HOST
  displayName: Kafka queue host
  required: true
  description: Hostname for the Kafka queue
  value: kafka
- name: KAFKA_PORT
  displayName: Kafka queue port
  required: true
  description: Port for the Kafka queue
  value: "9092"
